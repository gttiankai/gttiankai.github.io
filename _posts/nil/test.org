#+STARTUP: showall
#+STARTUP: hidestars
#+OPTIONS: H:2 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+AUTHOR: nil
#+DATE: 2015-06-10 Wed 23:01
#+TITLE: Test
#+DESCRIPTION: test
#+CATEGORIES: Test


* 初步使用org2blog
首先我们需要测试一下org2blog的功能能不能正常的运行

SVN Note
* svn 安装
在ubuntu上:

#+BEGIN_SRC 
sudo apt-get install subversion 
#+END_SRC

还有一个subversion的工具需要安装一下:

#+BEGIN_SRC 
sudo apt-get install subversion-tools
#+END_SRC

* svn使用笔记
** 从远程仓库中copy一份文件(检出)
使用svn做版本控制的第一步一般都是从远程仓库中复制一个副本,使用的命令是:

#+BEGIN_SRC 
svn checkout https//.... --username yourusername
#+END_SRC

这个命令和git中的命令很不一样,个人感觉还是git中的命令比较直白,该命令等同
于git:中的命令:

#+BEGIN_SRC 
git clone url-to-reposity
#+END_SRC
** 将文件加入版本库
#+BEGIN_SRC 
svn add filename
#+END_SRC
** commit
#+BEGIN_SRC 
svn commit -m " some message"
#+END_SRC
** update
#+BEGIN_SRC 
svn update
svn update -r 
svn update file-name
#+END_SRC
** merge
关于svn merge的内容建议看一下链接:[[http://svnbook.red-bean.com/en/1.6/svn.ref.svn.c.merge.html][点这里]]. 
#+source: svn merge
#+begin_src zsh
$ svn merge --reintegrate http://svn.example.com/repos/calc/branches/my-calc-branch
--- Merging differences between repository URLs into '.':
U    button.c
U    integer.c
U    Makefile
U   .

$ # build, test, verify, ...

$ svn commit -m "Merge my-calc-branch back into trunk!"
Sending        .
Sending        button.c
Sending        integer.c
Sending        Makefile
Transmitting file data ..
Committed revision 391.
#+end_src

** 冲突解决
使用版本控制软件和别人进行合作开发,避免不了冲突的产生,所以解决冲突是非常重要的技能.网上有一篇比较好的帖子:[[http://svnbook.red-bean.com/en/1.6/svn.ref.svn.c.resolve.html][点这里]] \\
使用的命令: svn resolve PATH...

Description

Resolve “conflicted” state on working copy files or directories. This routine does not semantically resolve conflict markers; however, it replaces PATH with the version specified by the --accept argument and then removes conflict-related artifact files. This allows PATH to be committe again—that is, it tells Subversion that the conflicts have been “resolved.”. You can pass the following arguments to the --accept command depending on your desired resolution:

base
Choose the file that was the BASE revision before you updated your working copy. That is, the file that you checked out before you made your latest edits.

working
Assuming that you've manually handled the conflict resolution, choose the version of the file as it currently stands in your working copy.

mine-full
Resolve all conflicted files with copies of the files as they stood immediately before you ran svn update.

theirs-full
Resolve all conflicted files with copies of the files that were fetched from the server when you ran svn update.

See the section called “Resolve Any Conflicts” for an in-depth look at resolving conflicts.
#+source: svn resolved the conflict
#+begin_src zsh
$ svn update
Conflict discovered in 'foo.c'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: p
C    foo.c
Updated to revision 5.
Summary of conflicts:
  Text conflicts: 1
$ svn resolve --accept mine-full foo.c
Resolved conflicted state of 'foo.c'
#+end_src
